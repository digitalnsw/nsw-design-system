---
title: Quick exit
layout: blank-layout.hbs
---

<h2>Usage</h2>
<p>A standardised quick exit link offers a discreet and accessible safety mechanism, allowing users to swiftly leave sensitive content with a single click. This component is designed to be integrated within global alerts or similar interface patterns where rapid exit is required.</p>

<p>Use quick exits:</p>
<ul>
  <li>Integrate the quick exit link within our standardised sticky banner alongside the cookie banner.</li>
  <li>Ensure it is clearly labelled and contrasts sufficiently with the background for easy visibility.</li>
</ul>

<p>Do:</p>
<ul>
  <li>Use the quick exit link when a user's safety or privacy could be at risk if they remain on the page.</li>
  <li>Ensure that clicking the link immediately redirects the user to a safe and neutral destination.</li>
</ul>

<h3>When to Avoid</h3>
<p>Do not display the quick exit link as a response to regular user interactions or system events that are not associated with an immediate safety risk. The component should not be used to simply navigate between pages or for typical exit actions.</p>

<h2>Accessibility</h2>
<p>All components are responsive and designed to comply with WCAG 2.2 AA accessibility standards. Full compliance depends on using and configuring the components correctly.</p>
<h3>Obstruction of content</h3>
<p>The quick exit link must not obstruct critical page content. When placed in a sticky container, ensure that sufficient space is reserved at the bottom of the page so that all content remains fully accessible and readable. This is achieved by adding a bottom padding equal to the height of the sticky container.</p>

<h2>Initialisation</h2>
<p>The Quick Exit component can be initialised in two ways, depending on your needs:</p>

<h3>1. Programmatic initialisation</h3>
<p>The preferred method for most implementations is to call the <code>QuickExit.init()</code> function directly and pass configuration options. This approach provides more control when integrating into applications.</p>
{{#>_docs-example hidden="true" open="true" code="js"}}
window.NSW.QuickExit.init({
  exitUrl: 'https://www.nsw.gov.au/',
  exitLabel: 'Leave site',
  popover: 'Quickly leave this site and go to a neutral page',
  moreInfoUrl: 'https://www.nsw.gov.au/help',
  moreInfoLabel: 'More info',
  theme: 'dark',
  eraseCurrentPage: true,
  newTab: false,
  enableEsc: false,
})
{{/_docs-example}}

<h3>2. Declarative initialisation</h3>
<p>Alternatively, use the DS-style module hook with a compact JSON options payload. Add <code>data-module="quick-exit"</code> and pass configuration via a single <code>data-options</code> attribute. This is useful for demos or CMS-driven pages where direct JavaScript configuration is less convenient.</p>
{{#>_docs-example hidden="true" open="true" code="html"}}
&lt;span
  data-module="quick-exit"
  data-options='{
    "exitUrl": "https://www.nsw.gov.au/",
    "exitLabel": "Leave site",
    "popover": "Quickly leave this site and go to a neutral page",
    "moreInfoUrl": "https://www.nsw.gov.au/help",
    "moreInfoLabel": "More info",
    "theme": "dark",
    "eraseCurrentPage": true,
    "newTab": false,
    "enableEsc": false
  }'&gt;
&lt;/span&gt;
{{/_docs-example}}

<p><strong>Note:</strong> On this docs site we show a button-triggered demo for convenience. In production, prefer the programmatic initialisation above for better control and immediate banner setup without requiring a user click.</p>

<p>Both methods achieve the same result. Programmatic initialisation provides more control when integrating into applications, while declarative attributes are best for simple usage and documentation examples.</p>
